print(artist)
tracklist <- get_album_tracklist_search(artist_name = "Tyler, The Creator",
album_name = "Flower Boy")
}
for (artist,song in artist){
print(artist)
print(song)
tracklist <- get_album_tracklist_search(artist_name = "Tyler, The Creator",
album_name = "Flower Boy")
}
#Extracts data for each artists, adds a variable for artists and binds them to a single data-frame.
artists <- c('Frank Ocean','Kanye West','Kendrick Lamar','Tyler The Creator','Lauren Hill')
View(dissect_df)
artists_alubms <- dissect_df%>%select('artist_name','album_name')%>%unique()%>%filter(album_name != 'Cherry Bomb + Instrumentals',
album_name != 'Live At Splash!',
album_name != 'Black Panther The Album Music From And Inspired By',
album_name != 'DAMN. COLLECTORS EDITION.',
album_name != 'Graduation (Alternative Business Partners)')
# scrape album tracklist
tracklist = data.frame()
tracklist = data.frame()
for (artist in artists){
tmp = artist_albms[artists_alubms$artist_name == artist,]
for (track in tmp$album_name){
tmp_2 <- get_album_tracklist_search(artist_name = artist,
album_name = track)
tracklist = rbind(tracklist,tmp_2)
}
}
for (artist in artists){
tmp = artist_alubms[artists_alubms$artist_name == artist,]
for (track in tmp$album_name){
tmp_2 <- get_album_tracklist_search(artist_name = artist,
album_name = track)
tracklist = rbind(tracklist,tmp_2)
}
}
for (artist in artists){
tmp = artists_alubms[artists_alubms$artist_name == artist,]
for (track in tmp$album_name){
tmp_2 <- get_album_tracklist_search(artist_name = artist,
album_name = track)
tracklist = rbind(tracklist,tmp_2)
}
}
View(tracklist)
View(artists_alubms)
tracklist = data.frame()
for (artist in artists){
tmp = artists_alubms[artists_alubms$artist_name == artist,]
for (track in tmp$album_name){
try( tmp_2 <- get_album_tracklist_search(artist_name = artist,
album_name = track), )
tracklist = rbind(tracklist,tmp_2)
}
}
View(tracklist)
View(artists_alubms)
#Extracts data for each artists, adds a variable for artists and binds them to a single data-frame.
artists <- c('Frank Ocean','Kanye West','Kendrick Lamar','Tyler, The Creator','Lauryn Hill')
tracklist = data.frame()
for (artist in artists){
tmp = artists_alubms[artists_alubms$artist_name == artist,]
print(artist)
for (track in tmp$album_name){
try( tmp_2 <- get_album_tracklist_search(artist_name = artist,
album_name = track), )
tracklist = rbind(tracklist,tmp_2)
}
}
View(tracklist)
tracklist = data.frame()
for (artist in artists){
tmp = artists_alubms[artists_alubms$artist_name == artist,]
print(artist)
for (track in tmp$album_name){
try( tmp_2 <- get_album_tracklist_search(artist_name = artist,
album_name = track), )
tracklist = rbind(tracklist,tmp_2)
Sys.sleep(1)
}
}
View(tracklist)
source('~/OneDrive - Comcast/R markdown for blog/Dissect_podcast_analysis/extracting_data.R', echo=TRUE)
Sys.setenv(SPOTIFY_CLIENT_ID = 'c9eb9c91c7d54df9815c742543687f54')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '120e876df17c426c8061d2026a7dfd38')
access_token <- get_spotify_access_token()
#Extracts data for each artists, adds a variable for artists and binds them to a single data-frame.
artists <- c('Frank Ocean','Kanye West','Kendrick Lamar','Tyler, The Creator','Lauryn Hill')
dissect_df <- data.frame()
for (artist in artists){
df <- get_artist_audio_features(artist )
df$artist <- artist
dissect_df <- rbind(df,dissect_df)
}
dissect_df <- dissect_df%>%select(
'artist_name',
'album_release_date', 'danceability',
'energy', 'loudness', 'speechiness', 'acousticness', "instrumentalness", 'liveness', 'valence', 'tempo','track_name', 'album_name', 'key_name', 'mode_name'
)
artists_alubms <- dissect_df%>%select('artist_name','album_name')%>%unique()%>%filter(album_name != 'Cherry Bomb + Instrumentals',
album_name != 'Live At Splash!',
album_name != 'Black Panther The Album Music From And Inspired By',
album_name != 'DAMN. COLLECTORS EDITION.',
album_name != 'Graduation (Alternative Business Partners)')
tracklist = data.frame()
for (artist in artists){
tmp = artists_alubms[artists_alubms$artist_name == artist,]
print(artist)
for (track in tmp$album_name){
try( tmp_2 <- get_album_tracklist_search(artist_name = artist,
album_name = track), )
tracklist = rbind(tracklist,tmp_2)
Sys.sleep(1)
}
}
View(tracklist)
View(tmp)
View(tmp_2)
View(tmp)
View(dissect_df)
dissect_df <- dissect_df%>%select(
'artist_name', 'artist',
'album_release_date', 'danceability',
'energy', 'loudness', 'speechiness', 'acousticness', "instrumentalness", 'liveness', 'valence', 'tempo','track_name', 'album_name', 'key_name', 'mode_name'
)
View(artists_alubms)
View(df)
dissect_df <- data.frame()
for (artist in artists){
df <- get_artist_audio_features(artist )
df$artist <- artist
dissect_df <- rbind(df,dissect_df)
}
dissect_df <- dissect_df%>%select(
'artist_name', 'artist',
'album_release_date', 'danceability',
'energy', 'loudness', 'speechiness', 'acousticness', "instrumentalness", 'liveness', 'valence', 'tempo','track_name', 'album_name', 'key_name', 'mode_name'
)
tracks <- artist %>%
map_df(get_album_tracklist_search(artist_name = 'artist_name', album_name = 'album_name'))
# scrape album tracklist
tracklist = data.frame()
for (artist in artists){
tmp = artists_alubms[artists_alubms$artist_name == artist,]
print(artist)
for (track in tmp$album_name){
try( tmp_2 <- get_album_tracklist_search(artist_name = artist,
album_name = track), )
tracklist = rbind(tracklist,tmp_2)
Sys.sleep(2)
}
}
View(tracklist)
tracklist = data.frame()
for (artist in artists){
tmp = artists_alubms[artists_alubms$artist == artist,]
print(artist)
for (track in tmp$album_name){
try( tmp_2 <- get_album_tracklist_search(artist_name = artist,
album_name = track), )
tracklist = rbind(tracklist,tmp_2)
Sys.sleep(2)
}
}
View(tracklist)
lyrics <- map_df(tracklist$song_lyrics_url, get_lyrics_url)
View(tracklist)
q()
Sys.setenv(SPOTIFY_CLIENT_ID = 'c9eb9c91c7d54df9815c742543687f54')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '120e876df17c426c8061d2026a7dfd38')
access_token <- get_spotify_access_token()
require(spotifyr)
require(tidyverse)
require(ggplot2)
require(geniusr)
require(tidytext)
# Sets the API Keys and authenticates app
Sys.setenv(SPOTIFY_CLIENT_ID = 'c9eb9c91c7d54df9815c742543687f54')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '120e876df17c426c8061d2026a7dfd38')
access_token <- get_spotify_access_token()
library(lubridate)
get_my_recently_played(limit = 5) %>%
mutate(artist.name = map_chr(track.artists, function(x) x$name[1]),
played_at = as_datetime(played_at)) %>%
select(track.name, artist.name, track.album.name, played_at) %>%
kable()
Sys.setenv(SPOTIFY_CLIENT_ID = 'c9eb9c91c7d54df9815c742543687f54')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '9778531b27614720be4f7c5224a9c975')
access_token <- get_spotify_access_token()
Sys.setenv(SPOTIFY_CLIENT_ID = 'c9eb9c91c7d54df9815c742543687f54')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '9778531b27614720be4f7c5224a9c975')
access_token <- get_spotify_access_token()
get_my_recently_played(limit = 5) %>%
mutate(artist.name = map_chr(track.artists, function(x) x$name[1]),
played_at = as_datetime(played_at)) %>%
select(track.name, artist.name, track.album.name, played_at) %>%
kable()
get_my_recently_played(limit = 5) %>%
mutate(artist.name = map_chr(track.artists, function(x) x$name[1]),
played_at = as_datetime(played_at)) %>%
select(track.name, artist.name, track.album.name, played_at) %>%
kable()
Sys.setenv(SPOTIFY_CLIENT_ID = 'c9eb9c91c7d54df9815c742543687f54')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '9778531b27614720be4f7c5224a9c975')
access_token <- get_spotify_access_token()
get_my_recently_played(limit = 5) %>%
mutate(artist.name = map_chr(track.artists, function(x) x$name[1]),
played_at = as_datetime(played_at)) %>%
select(track.name, artist.name, track.album.name, played_at) %>%
kable()
get_my_recently_played(limit = 5) %>%
mutate(artist.name = map_chr(track.artists, function(x) x$name[1]),
played_at = as_datetime(played_at)) %>%
select(track.name, artist.name, track.album.name, played_at) %>%
kable()
Sys.setenv(SPOTIFY_CLIENT_ID = 'c9eb9c91c7d54df9815c742543687f54')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '120e876df17c426c8061d2026a7dfd38')
access_token <- get_spotify_access_token()
#Extracts data for each artists, adds a variable for artists and binds them to a single data-frame.
artists <- c('Frank Ocean','Kanye West','Kendrick Lamar','Tyler, The Creator','Lauryn Hill')
dissect_df <- data.frame()
for (artist in artists){
df <- get_artist_audio_features(artist )
df$artist <- artist
dissect_df <- rbind(df,dissect_df)
}
Sys.setenv(SPOTIFY_CLIENT_ID = 'c9eb9c91c7d54df9815c742543687f54')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '120e876df17c426c8061d2026a7dfd38')
access_token <- get_spotify_access_token()
Sys.setenv(SPOTIFY_CLIENT_ID = 'c9eb9c91c7d54df9815c742543687f54')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '9778531b27614720be4f7c5224a9c975')
access_token <- get_spotify_access_token()
df <- get_artist_audio_features(artist )
get_my_recently_played(limit = 5) %>%
mutate(artist.name = map_chr(track.artists, function(x) x$name[1]),
played_at = as_datetime(played_at)) %>%
select(track.name, artist.name, track.album.name, played_at) %>%
kable()
get_my_recently_played(limit = 5)
get_my_recently_played(authorization = access_token)
get_my_recently_played(authorization = access_token)
get_my_recently_played()
get_my_recently_played(limit = 5) %>%
mutate(artist.name = map_chr(track.artists, function(x) x$name[1]),
played_at = as_datetime(played_at)) %>%
select(track.name, artist.name, track.album.name, played_at) %>%
kable()
get_my_recently_played(limit = 5) %>%
mutate(artist.name = map_chr(track.artists, function(x) x$name[1]),
played_at = as_datetime(played_at)) %>%
select(track.name, artist.name, track.album.name, played_at) %>%
kable()
get_my_recently_played()
Sys.setenv(SPOTIFY_CLIENT_ID = 'c9eb9c91c7d54df9815c742543687f54')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '9778531b27614720be4f7c5224a9c975')
access_token <- get_spotify_access_token()
get_my_recently_played(limit = 5) %>%
mutate(artist.name = map_chr(track.artists, function(x) x$name[1]),
played_at = as_datetime(played_at)) %>%
select(track.name, artist.name, track.album.name, played_at) %>%
kable()
Sys.setenv(SPOTIFY_CLIENT_ID = 'c9eb9c91c7d54df9815c742543687f54')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '9778531b27614720be4f7c5224a9c975')
access_token <- get_spotify_access_token()
get_my_recently_played(limit = 5) %>%
mutate(artist.name = map_chr(track.artists, function(x) x$name[1]),
played_at = as_datetime(played_at)) %>%
select(track.name, artist.name, track.album.name, played_at) %>%
kable()
Sys.setenv(SPOTIFY_CLIENT_ID = 'c9eb9c91c7d54df9815c742543687f54')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '9778531b27614720be4f7c5224a9c975')
access_token <- get_spotify_access_token()
get_my_recently_played(limit = 5) %>%
mutate(artist.name = map_chr(track.artists, function(x) x$name[1]),
played_at = as_datetime(played_at)) %>%
select(track.name, artist.name, track.album.name, played_at) %>%
kable()
get_my_recently_played()
get_my_top_artists_or_tracks(type = 'artists', time_range = 'long_term', limit = 5) %>%
select(name, genres) %>%
rowwise %>%
mutate(genres = paste(genres, collapse = ', ')) %>%
ungroup %>%
kable()
get_my_top_artists_or_tracks(type = 'tracks', time_range = 'short_term', limit = 5) %>%
mutate(artist.name = map_chr(artists, function(x) x$name[1])) %>%
select(name, artist.name, album.name) %>%
kable()
get_my_recently_played(limit = 5) %>%
mutate(artist.name = map_chr(track.artists, function(x) x$name[1]),
played_at = as_datetime(played_at)) %>%
select(track.name, artist.name, track.album.name, played_at) %>%
kable()
devtools::install_github('charlie86/spotifyr')
require(spotifyr)
Sys.setenv(SPOTIFY_CLIENT_ID = 'c9eb9c91c7d54df9815c742543687f54')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '9778531b27614720be4f7c5224a9c975')
access_token <- get_spotify_access_token()
get_my_recently_played(limit = 5) %>%
mutate(artist.name = map_chr(track.artists, function(x) x$name[1]),
played_at = as_datetime(played_at)) %>%
select(track.name, artist.name, track.album.name, played_at) %>%
kable()
Sys.setenv(SPOTIFY_CLIENT_ID = '2bb8f7a39264476a84c6fc39de879eaa')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '8dd48234b06a45d69658d5a811b3e3ca')
access_token <- get_spotify_access_token()
get_my_recently_played(limit = 5) %>%
mutate(artist.name = map_chr(track.artists, function(x) x$name[1]),
played_at = as_datetime(played_at)) %>%
select(track.name, artist.name, track.album.name, played_at) %>%
kable()
tracks <- get_artist_audio_features(artist)
View(tracks)
albums <- map_df(get_album_data,tracks$album_id)
albums <- map_df(tracks$album_id,get_album_data)
View(tracks)
library(shiny)
require(spotifyr)
require(tidyverse)
require(ggplot2)
require(tidytext)
source('~/OneDrive - Comcast/R markdown for blog/Dissect_podcast_analysis/extracting_data.R')
runApp('artist_metric/artist_dashboard.R')
runApp('artist_metric/artist_dashboard.R')
runApp('artist_metric/artist_dashboard.R')
runApp('artist_metric/artist_dashboard.R')
runApp('artist_metric/artist_dashboard.R')
runApp('artist_metric/artist_dashboard.R')
album <- unique(tracks$album_id)
albums <- map_df(album,get_album_data)
Sys.setenv(SPOTIFY_CLIENT_ID = 'c9eb9c91c7d54df9815c742543687f54')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '9778531b27614720be4f7c5224a9c975')
access_token <- get_spotify_access_token()
albums <- map_df(album,get_album_data)
albums <- map_df(album,get_album)
Sys.setenv(SPOTIFY_CLIENT_ID = 'c9eb9c91c7d54df9815c742543687f54')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '9778531b27614720be4f7c5224a9c975')
access_token <- get_spotify_access_token()
albums <- map_df(album,get_album)
albums <- map_df(album,get_album(authorization = get_spotify_access_token()))
albums <- map_df(album,get_album(authorization = get_spotify_access_token()))
albums <- map_df(album,get_album(authorization = access_token))
detach('geniusr')
detach(geniusr)
require(spotifyr)
get_albums(album)
al<-get_albums(album)
View(al)
View(al[[8]][[1]])
al$images[1]
al$images[1]$url
al$images[[1]
al$images[[1]]
al$images[1][2]
al$images[1]
View(al[[8]][[1]])
al$images[[[1]]]
al$images[[1]]
al$images[[1]]$url
al$images[[1]]$url[1]
install.packages('joeg')
install.packages('jpeg')
require(jpeg)
readJPEG(al$images[[1]]$url[1])
install.packages("imager")
require(imager)
tracks %>%
select('track_name','danceability',
'energy', 'loudness', 'speechiness', 'acousticness', "instrumentalness", 'liveness', 'valence', 'tempo')%>%
gather(key='Metric',value = 'value',-track_name)
require(ggbeeswarm)
tracks %>%
select('track_name','danceability',
'energy', 'loudness', 'speechiness', 'acousticness', "instrumentalness", 'liveness', 'valence', 'tempo')%>%
gather(key='Metric',value = 'value',-track_name)%>%
ggplot(aes(x=value,y=metric,color=key))+
geom_quasirandom(groupOnX=FALSE)
tracks %>%
select('track_name','danceability',
'energy', 'loudness', 'speechiness', 'acousticness', "instrumentalness", 'liveness', 'valence', 'tempo')%>%
gather(key='metric',value = 'value',-track_name)%>%
ggplot(aes(x=value,y=metric,color=key))+
geom_quasirandom(groupOnX=FALSE)
tracks %>%
select('track_name','danceability',
'energy', 'loudness', 'speechiness', 'acousticness', "instrumentalness", 'liveness', 'valence', 'tempo')%>%
gather(key='metric',value = 'value',-track_name)%>%
ggplot(aes(x=value,y=metric,color=value))+
geom_quasirandom(groupOnX=FALSE)
tracks %>%
select('track_name','danceability',
'energy', 'loudness', 'speechiness', 'acousticness', "instrumentalness", 'liveness', 'valence')%>%
gather(key='metric',value = 'value',-track_name)%>%
ggplot(aes(x=value,y=metric,color=value))+
geom_quasirandom(groupOnX=FALSE)
tracks %>%
select('track_name','danceability',
'energy', 'loudness', 'speechiness', 'acousticness', "instrumentalness", 'liveness', 'valence')%>%
gather(key='metric',value = 'value',-track_name)%>%
ggplot(aes(x=value,y=metric,color=value))+
geom_quasirandom(groupOnX=FALSE)
tracks %>%
select('track_name','danceability',
'energy', 'speechiness', 'acousticness', "instrumentalness", 'liveness', 'valence')%>%
gather(key='metric',value = 'value',-track_name)%>%
ggplot(aes(x=value,y=metric,color=value))+
geom_quasirandom(groupOnX=FALSE)
tracks %>%
select('track_name','danceability',
'energy', 'speechiness', 'acousticness', "instrumentalness", 'liveness', 'valence')%>%
gather(key='metric',value = 'value',-track_name)%>%
ggplot(aes(x=value,y=metric,color=metric))+
geom_quasirandom(groupOnX=FALSE)
runApp('artist_metric/artist_dashboard.R')
q()
get_al
tracks <- get_artist_audio_features(artist)
artist <- 'Kanye West'
album <- unique(tracks$album_id)
require(spotifyr)
require(tidyverse)
require(ggplot2)
require(tidytext)
require(ggbeeswarm)
Sys.setenv(SPOTIFY_CLIENT_ID = 'c9eb9c91c7d54df9815c742543687f54')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '9778531b27614720be4f7c5224a9c975')
access_token <- get_spotify_access_token()
artist <- 'Kanye West'
tracks <- get_artist_audio_features(artist)
album <- unique(tracks$album_id)
al<-get_albums(album)
al <- get_albums(album)
al <- get_albums(ids=album)
albums <- map_df(album,get_album(authorization = access_token))
albums <- map_df(album,get_album(id = albumauthorization = access_token))
albums <- map_df(album,get_album(id = album,authorization = access_token))
albums <- map_df(album,get_album())
albums <- map_df(album,get_album
)
albums <- map(album,get_album)
View(albums)
albums <- map_df(album,get_album)
album <- as.data.frame(unique(tracks$album_id))
albums <- map_df(album$`unique(tracks$album_id)`,get_album)
albums <- unnest(map(album$`unique(tracks$album_id)`,get_album))
albums <- map(album$`unique(tracks$album_id)`,get_album)
View(albums)
albums <- map2_df(album$`unique(tracks$album_id)`,get_album)
albums <- map_df(album$`unique(tracks$album_id)`,get_album)
al <- get_albums(ids=album)
dmap
?dmap
??dmap
albums <- map_dfr(album$`unique(tracks$album_id)`,get_album)
album <-unique(tracks$album_id)
al <- get_albums(ids=album)
View(dissect_df)
View(tracks)
View(tracks[[5]][[1]])
tracks$album_images[[1]][[1]]
tracks$album_images[[1]][[2]]
tracks$album_images[[1]][[2]][1]
library(shiny); runApp('artist_metric/artist_dashboard.R')
runApp('artist_metric/artist_dashboard.R')
tracks$album_images[[1]][[2]][1]
tracks$album_images[[1]][[2]][1][]1
tracks$album_images[[1]][[2]][1][1]
tracks$album_images[[1]][[2]][1][1][1]
tracks$album_images[[1]][[2]][1][1]
as.character(tracks$album_images[[1]][[2]][1][1])
runApp('artist_metric/artist_dashboard.R')
img_alb <- unnest(tracks$album_images)
img_alb <- unnest(tracks$album_images,col=c())
img_alb <- tracks$album_images
View(img_alb)
runApp('artist_metric/artist_dashboard.R')
runApp('artist_metric/artist_dashboard.R')
img_alb <- unlist(tracks$album_images)
img_alb <-map_df(tracks$album_images,unlist)
img_alb <-map_df(tracks$album_images,unnest)
img_alb <-map_df(tracks$album_images,unnest)%>%filter(width=64)
img_alb <-map_df(tracks$album_images,unnest)%>%filter(width==64)
runApp('artist_metric/artist_dashboard.R')
runApp('artist_metric/artist_dashboard.R')
runApp('artist_metric/artist_dashboard.R')
runApp('artist_metric/artist_dashboard.R')
runApp('artist_metric/artist_dashboard.R')
install.packages("blogdown")
blogdown::install_hugo()
q()
shiny::runApp('dream_team-master')
install.packages(shinyWidgets)
install.packages('shinyWidgets')
install.packages(scrollytell)
install.packages('scrollytell')
install.packages('scrollytell')
runApp('dream_team-master')
devtools::install_github("statistiekcbs/scrollytell")
install.packages('devtools')
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
shiny::runApp('dream_team-master')
q()
library(shiny); runApp('artist_metric/artist_dashboard.R')
install.packages('tidytext')
install.packages('spotifyr')
runApp('artist_metric/artist_dashboard.R')
install.packages('highcharter')
runApp('artist_metric/artist_dashboard.R')
q()
